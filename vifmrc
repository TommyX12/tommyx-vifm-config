" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 31 August, 2021)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

if system('uname') == 'Darwin'
    " Suppress "Permission denied" errors using syntax specific to GNU find
    if system("find --version | grep -c 'GNU findutils'") != 0
        set findprg='find %s %a -print , -type d \( ! -readable -o ! -executable \) -prune'
    endif

    " Add -s to the default value to suppress "Permission denied" errors
    set grepprg="grep -n -H -I -r -s %i %a %s"

    " :filetype pattern1,pattern2 defaultprogram,program2
    " :fileviewer pattern1,pattern2 consoleviewer
    "
    " The first entry is the default program to be used with a matching file.
    " The other programs for the file type can be accessed via :file command.
    " The command macros like %f, %F, %d, %D may be used in the commands.
    " The %a macro is ignored.  To use a % you must put %%.
    " Spaces in an app name must be escaped, for example: QuickTime\ Player.app

    " For automated FUSE mounts, you must register an extension with :file[x]type
    " in one of the following formats:
    "
    " :filetype patterns FUSE_MOUNT|mount_cmd %SOURCE_FILE %DESTINATION_DIR
    "
    " %SOURCE_FILE and %DESTINATION_DIR are filled in at runtime.
    "
    " Example:
    "   :filetype *.zip,*.[jwe]ar FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
    "
    " :filetype patterns FUSE_MOUNT2|mount_cmd %PARAM %DESTINATION_DIR
    "
    " %PARAM and %DESTINATION_DIR are filled in at runtime.
    "
    " Example:
    "   :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
    "
    " %PARAM value is the first line of the matched file, example: root@127.0.0.1:/
    "
    " You can also add %CLEAR if you want to clear screen before running FUSE
    " program.  There is also %FOREGROUND, which is useful for entering passwords.

    " Pdf
    filetype {*.pdf},<application/pdf>
        \ {Open in Preview}
        \ open -a Preview.app,
        \ {Open in Skim}
        \ open -a Skim.app,
    fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

    " PostScript
    filetype {*.ps,*.eps,*.ps.gz},<application/postscript> open -a Preview.app

    " Djvu
    filetype {*.djvu},<image/vnd.djvu> open -a MacDjView.app

    " Audio
    filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
            \*.aac,*.mpga},
            \<audio/*>
        \ {Open in Music}
        \ open -a Music.app,
        \ {Open in QuickTime Player}
        \ open -a QuickTime\ Player.app,
        \ {Open in IINA}
        \ open -a IINA.app,
    fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
            \*.aac,*.mpga},
            \<audio/*>
            \ ffprobe -hide_banner -pretty %c 2>&1

    " Video
    filetype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
            \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
            \*.as[fx],*.unknown_video},
            \<video/*>
        \ {Open in QuickTime Player}
        \ open -a QuickTime\ Player.app,
        \ {Open in IINA}
        \ open -a IINA.app,
        \ {Open in VLC}
        \ open -a VLC.app,
    fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
            \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
            \*.as[fx],*.unknown_video},
            \<video/*>
            \ ffprobe -hide_banner -pretty %c 2>&1

    " Web
    filetype {*.xhtml,*.html,*.htm},<text/html>
        \ {Open in Safari}
        \ open -a Safari.app,
        \ {Open in Firefox}
        \ open -a Firefox.app,
        \ {Open in Chrome}
        \ open -a Google\ Chrome.app,
        \ {Open in vim}
        \ vim,
    fileviewer {*.xhtml,*.html,*.htm},<text/html> w3m -dump -T text/html

    " Object
    filetype {*.o},<application/x-object> nm %f | less

    " Man page
    filetype {*.[1-8]},<text/troff> man ./%c
    fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

    " Image
    filetype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
        \ open -a Preview.app,
    fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
            \ identify %f

    " MD5
    filetype *.md5
        \ {Check MD5 hash sum}
        \ md5sum -c %f %S,

    " SHA1
    filetype *.sha1
        \ {Check SHA1 hash sum}
        \ shasum -c %f %S,

    " SHA256
    filetype *.sha256
        \ {Check SHA256 hash sum}
        \ shasum -a 256 -c %f %S,

    " SHA512
    filetype *.sha512
        \ {Check SHA512 hash sum}
        \ shasum -a 512 -c %f %S,

    " Torrent
    filetype {*.torrent},<application/x-bittorrent> open -a Transmission.app
    fileviewer {*.torrent},<application/x-bittorrent>
            \ dumptorrent -v %c,
            \ transmission-show %c

    " Extract zip files
    filetype {*.zip},<application/zip,application/java-archive>
        \ mkdir %f:r && tar -vxf %f --directory %f:r
    fileviewer {*.zip,*.jar,*.war,*.ear},
            \<application/zip,application/java-archive>
            \ tar -tf %f

    " Extract tar archives
    filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
            \*.tzst},
            \<application/x-tar>
        \ tar -vxf %f
    fileviewer {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
            \*.tzst},
            \<application/x-tar>
            \ tar -tf %f

    " Extract .bz2 archives
    filetype *.bz2 bzip2 -d %f

    " Extract .gz files
    filetype *.gz gunzip %f

    " Extract rar files
    filetype *.rar unrar x -y -c- -ad %f %s
    fileviewer *.rar unrar lb %c

    " Mount .dmg archives
    filetype *.dmg open

    " Mount disk .img
    filetype *.img open

    " Open .pkg binaries
    filetype *.pkg open

    " Office files
    filetype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
            \<application/vnd.openxmlformats-officedocument.*,
            \application/msword,
            \application/vnd.ms-excel>
        \ open -a LibreOffice.app
    fileviewer {*.doc},<application/msword> antiword -
    fileviewer {*.docx},
            \<application/
            \vnd.openxmlformats-officedocument.wordprocessingml.document>
            \ docx2txt.pl %f -

    " Syntax highlighting in preview
    "
    " Explicitly set highlight type for some extensions
    "
    " 256-color terminal
    " fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
    " fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
    "
    " 16-color terminal
    " fileviewer *.c,*.h highlight -O ansi -s dante %c
    "
    " Or leave it for automatic detection
    " fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

    " Displaying pictures in terminal
    " fileviewer *.jpg,*.png shellpic %c

    " Open all other files with default system programs (you can also remove all
    " :file[x]type commands above to ensure they don't interfere with system-wide
    " settings).  Use of the line below results in ignoring 'vi[x]cmd' option for
    " unknown file types on l/Enter keys.
    " filetype * open

    " open file with default program
    noremap <cr> :! open %f &<cr>

else  " Linux
    " allow sharing files across vifm instances
    set syncregs=general

    " The file type is for the default programs to be used with
    " a file extension.
    " :filetype pattern1,pattern2 defaultprogram,program2
    " :fileviewer pattern1,pattern2 consoleviewer
    " The other programs for the file type can be accessed with the :file command
    " The command macros like %f, %F, %d, %D may be used in the commands.
    " The %a macro is ignored.  To use a % you must put %%.

    " For automated FUSE mounts, you must register an extension with :file[x]type
    " in one of following formats:
    "
    " :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
    " %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
    " A sample line might look like this:
    " :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
    "
    " :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
    " %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
    " A sample line might look like this:
    " :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
    " %PARAM value is filled from the first line of file (whole line).
    " Example first line for SshMount filetype: root@127.0.0.1:/
    "
    " You can also add %CLEAR if you want to clear screen before running FUSE
    " program.

    " Pdf
    filextype {*.pdf},<application/pdf> zathura %c %i &, apvlv %c, xpdf %c
    fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

    " PostScript
    filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
            \ {View in zathura}
            \ zathura %f,
            \ {View in gv}
            \ gv %c %i &,

    " Djvu
    filextype {*.djvu},<image/vnd.djvu>
            \ {View in zathura}
            \ zathura %f,
            \ {View in apvlv}
            \ apvlv %f,

    " Audio
    filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
            \<audio/*>
        \ {Play using ffplay}
        \ ffplay -nodisp -autoexit %c,
        \ {Play using MPlayer}
        \ mplayer %f,
    fileviewer {*.mp3},<audio/mpeg> mp3info
    fileviewer {*.flac},<audio/flac> soxi

    " Video
    filextype {*.avi,*.mp4,*.wmv,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
            \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.divx,
            \*.as[fx]},
            \<video/*>
            \ {View using ffplay}
            \ ffplay -fs -autoexit %f,
            \ {View using Dragon}
            \ dragon %f:p,
            \ {View using mplayer}
            \ mplayer %f,
    fileviewer {*.avi,*.mp4,*.wmv,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
            \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.divx,
            \*.as[fx]},
            \<video/*>
            \ ffprobe -pretty %c 2>&1

    " Web
    filextype {*.html,*.htm},<text/html>
            \ {Open with dwb}
            \ dwb %f %i &,
            \ {Open with firefox}
            \ firefox %f &,
            \ {Open with uzbl}
            \ uzbl-browser %f %i &,
    filetype {*.html,*.htm},<text/html> links, lynx

    " Object
    filetype {*.o},<application/x-object> nm %f | less

    " Man page
    filetype {*.[1-8]},<text/troff> man ./%c
    fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

    " Images
    filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
            \ {View in sxiv}
            \ sxiv %f,
            \ {View in gpicview}
            \ gpicview %c,
            \ {View in shotwell}
            \ shotwell,
    fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
            \ identify %f

    " OpenRaster
    filextype *.ora
            \ {Edit in MyPaint}
            \ mypaint %f,

    " Mindmap
    filextype *.vym
            \ {Open with VYM}
            \ vym %f &,

    " MD5
    filetype *.md5
        \ {Check MD5 hash sum}
        \ md5sum -c %f %S,

    " SHA1
    filetype *.sha1
        \ {Check SHA1 hash sum}
        \ sha1sum -c %f %S,

    " SHA256
    filetype *.sha256
        \ {Check SHA256 hash sum}
        \ sha256sum -c %f %S,

    " SHA512
    filetype *.sha512
        \ {Check SHA512 hash sum}
        \ sha512sum -c %f %S,

    " GPG signature
    filetype {*.asc},<application/pgp-signature>
        \ {Check signature}
        \ !!gpg --verify %c,

    " Torrent
    filetype {*.torrent},<application/x-bittorrent> ktorrent %f &
    fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c

    " FuseZipMount
    filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
            \<application/zip,application/java-archive>
        \ {Mount with fuse-zip}
        \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
        \ {View contents}
        \ zip -sf %c | less,
        \ {Extract here}
        \ tar -xf %c,
    fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

    " ArchiveMount
    filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,*.tzst},
            \<application/x-tar>
        \ {Mount with archivemount}
        \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
    fileviewer *.tgz,*.tar.gz tar -tzf %c
    fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
    fileviewer *.tar.xz,*.txz tar -tJf %c
    fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
    fileviewer {*.tar},<application/x-tar> tar -tf %c

    " Rar2FsMount and rar archives
    filetype {*.rar},<application/x-rar>
        \ {Mount with rar2fs}
        \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
    fileviewer {*.rar},<application/x-rar> unrar v %c

    " IsoMount
    filetype {*.iso},<application/x-iso9660-image>
        \ {Mount with fuseiso}
        \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

    " SshMount
    filetype *.ssh
        \ {Mount with sshfs}
        \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

    " FtpMount
    filetype *.ftp
        \ {Mount with curlftpfs}
        \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

    " Fuse7z and 7z archives
    filetype {*.7z},<application/x-7z-compressed>
        \ {Mount with fuse-7z}
        \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
    fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

    " Office files
    filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
            \<application/vnd.openxmlformats-officedocument.*,
            \application/msword,
            \application/vnd.ms-excel>
            \ libreoffice %f &
    fileviewer {*.doc},<application/msword> catdoc %c
    fileviewer {*.docx},
            \<application/
            \vnd.openxmlformats-officedocument.wordprocessingml.document>
            \ docx2txt.pl %f -

    " TuDu files
    filetype *.tudu tudu -f %c

    " Qt projects
    filextype *.pro qtcreator %f &

    " Directories
    filextype */
            \ {View in thunar}
            \ Thunar %f &,

    " Syntax highlighting in preview
    "
    " Explicitly set highlight type for some extensions
    "
    " 256-color terminal
    " fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
    " fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
    "
    " 16-color terminal
    " fileviewer *.c,*.h highlight -O ansi -s dante %c
    "
    " Or leave it for automatic detection
    "
    fileviewer *[^/] pygmentize -O style=default -f console256 -g

    " Displaying pictures in terminal
    "
    " fileviewer *.jpg,*.png shellpic %c

    " Open all other files with default system programs (you can also remove all
    " :file[x]type commands above to ensure they don't interfere with system-wide
    " settings).  By default all unknown files are opened with 'vi[x]cmd'
    " uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
    " for unknown file types.
    " For *nix:
    " filetype * xdg-open
    " For OS X:
    " filetype * open
    " For Windows:
    " filetype * start, explorer %"f &

    " open file with default program
    noremap <cr> :! xdg-open %f &<cr>

endif

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

if executable('nvim')
    set vicmd=nvim
elseif executable('vim')
    set vicmd=vim
elseif executable('elvis')
    set vicmd=elvis\ -G\ termcap
elseif executable('vile')
    set vicmd=vile
elseif $EDITOR != ''
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
endif

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" Natural sort of (version) numbers within text.

set sortnumbers

" default sort
set sort=+iname

" Maximum number of changes that can be undone.

set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.

set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.

set norunexec

" List of color schemes to try (picks the first one supported by the terminal)

colorscheme Default-256 Default

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Don't do too many requests to slow file systems

if !has('win')
	set slowfs=curlftpfs
endif

" Set custom status line look

set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark h ~/

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart full

" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,chistory,shistory,
	\phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------

" Sample mappings

" Start command in current directory
noremap s :!<space>
noremap S :!!<space>

" Display sorting dialog
noremap <space>s :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in existing instance of gvim
" nnoremap o :!gvim --remote-tab-silent %f<cr>
" Open file in new instance of gvim
" nnoremap O :!gvim %f<cr>

" Open file in the background using its default program
" nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
	" Yank current directory path to Windows clipboard with forward slashes
	noremap yd :!echo %"d:gs!\!/! %i | clip<cr>
	" Yank path to current file to Windows clipboard with forward slashes
	noremap yf :!echo %"f:gs!\!/! %i | clip<cr>
elseif executable('xclip')
	" Yank current directory path into the clipboard
	noremap yd :!echo %d | xclip -selection clipboard %i<cr>
	" Yank all currently selected files into the clipboard
	noremap yf :!echo %f:p | xclip -selection clipboard %i<cr>
elseif executable('xsel')
	" Yank current directory path into primary and selection clipboards
	noremap yd :!echo -n %d | xsel --input --primary %i &&
				\ echo -n %d | xsel --clipboard --input %i<cr>
	" Yank current file path into into primary and selection clipboards
	noremap yf :!echo -n %f:p | xsel --input --primary %i &&
				\ echo -n %f:p | xsel --clipboard --input %i<cr>
endif
vnoremap yy y

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc :rename<cr>
nnoremap A cw
vnoremap I cw
vnoremap cc cw
vnoremap A cw

" Open console in current directory
noremap t :!wezterm start --always-new-process --cwd '%d' &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
" nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>
" Open gvim to edit vifmrc
" nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
" nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
" nnoremap <f3> :!less %f<cr>
" nnoremap <f4> :edit<cr>
" nnoremap <f5> :copy<cr>
" nnoremap <f6> :move<cr>
" nnoremap <f7> :mkdir<space>
" nnoremap <f8> :delete<cr>

" Midnight commander alike mappings
" Open current directory in the other pane
" nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
" nnoremap <a-o> :sync %c<cr>
" Swap panes
" nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

highlight   clear

highlight   Win          cterm=none           ctermfg=234   ctermbg=NONE
highlight   OtherWin     cterm=none           ctermfg=238   ctermbg=NONE
highlight   Border       cterm=none           ctermfg=238   ctermbg=NONE
highlight   AuxWin       cterm=none           ctermfg=238   ctermbg=NONE

highlight   TopLine      cterm=bold           ctermfg=250   ctermbg=27
highlight   TopLineSel   cterm=bold           ctermfg=255   ctermbg=33

highlight   CmdLine      cterm=none           ctermfg=234   ctermbg=NONE
highlight   ErrorMsg     cterm=bold           ctermfg=160   ctermbg=NONE
highlight   StatusLine   cterm=bold           ctermfg=255   ctermbg=27
highlight   JobLine      cterm=bold           ctermfg=255   ctermbg=33
highlight   SuggestBox   cterm=bold           ctermfg=255   ctermbg=39
highlight   WildMenu     cterm=bold           ctermfg=255   ctermbg=39

highlight   CurrLine     cterm=bold,inverse ctermfg=default ctermbg=default
highlight   OtherLine    cterm=bold         ctermfg=default ctermbg=250
highlight   Selected     cterm=bold         ctermfg=255     ctermbg=34
highlight   LineNr       cterm=none           ctermfg=102   ctermbg=NONE

highlight   Directory    cterm=bold           ctermfg=25    ctermbg=NONE
highlight   Link         cterm=none           ctermfg=24    ctermbg=NONE
highlight   BrokenLink   cterm=none           ctermfg=160   ctermbg=NONE
highlight   Socket       cterm=bold           ctermfg=91    ctermbg=NONE
highlight   Device       cterm=none           ctermfg=124   ctermbg=NONE
highlight   Fifo         cterm=none           ctermfg=31    ctermbg=NONE
highlight   Executable   cterm=bold           ctermfg=28    ctermbg=NONE

set noquickview
set milleroptions=lsize:2,csize:3,rsize:3,rpreview:all
set millerview

unmap <space>

" So we don't have to press shift when we want to get into command mode.
noremap ; :

cnoremap jf %f

noremap J 5j
qnoremap J 5j
mnoremap J 5j
noremap K 5k
qnoremap K 5k
mnoremap K 5k

" shift-u redo
noremap U <C-r>

noremap f /
noremap <space>f =
qnoremap <space>f /
mnoremap <space>f /

" Clear match highlighting
noremap ,<space> :noh<cr>

" line numbering
set number
set norelativenumber

" split window vertically and horizontally
noremap <space>wv <C-w>v
noremap <space>wd <C-w>s
" close everything
noremap <space>wq :q<cr>

" move to bottom
noremap gG G
qnoremap gG G
mnoremap gG G

" create file
nnoremap o :touch<space>
nnoremap O :mkdir!<space>

" select with v
noremap v t
noremap V v

" select all searched files
noremap ,s :set hlsearch!<cr>:set hlsearch?<cr>

" jump back and forth
nnoremap m <C-o>
nnoremap M :histnext<cr>

if executable('fdfind')
    command! FZFfind :
                    \| let $FZF_PICK = term('fdfind -I | fzf 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute 'goto' fnameescape($FZF_PICK)
                    \| endif
    command! FZFfinddir :
                    \| let $FZF_PICK = term('fdfind -t d -H -I | fzf 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute 'goto' fnameescape($FZF_PICK)
                    \| endif
else
    command! FZFfind :
                    \| let $FZF_PICK = term('fd -I | fzf 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute 'goto' fnameescape($FZF_PICK)
                    \| endif
    command! FZFfinddir :
                    \| let $FZF_PICK = term('fd -t d -H -I | fzf 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute 'goto' fnameescape($FZF_PICK)
                    \| endif
endif
noremap <space>n :FZFfind<cr>
noremap <space>if :FZFfind<cr>
noremap <space>N :FZFfind<cr>
noremap <space>id :grep<space>

" Use ripgrep instead of grep
set grepprg=rg\ -Hn\ %i\ %a\ %s

" Use fd instead of find
set findprg=fdfind\ %p\ %s

only

" show hidden files
set dotfiles

" move cursor to comfortable reading position
noremap ,z zz

" show file info
noremap i <C-g>

" status line
highlight User1 ctermbg=33
set statusline="%1* %t %[%0* -> %T %]%1* %= %1* %A %0* %u:%g %1* %E %0* %d %N%1* %z %1* %= %0* Free: %a/%c "

set timefmt=%Y-%m-%d\ %H:%M:%S

" go to home with ~
nnoremap ~ :cd ~<cr>

" open in thunar
noremap <space>t :! thunar %f &<cr>

" toggle show as tree
nnoremap T :tree!<cr>
